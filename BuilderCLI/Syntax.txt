// These tokens are chosen based on the idea that they narrate the work that you do when
// using the language or narrate the thoughts that you're having when you use the
// language. In other words, the grammar is designed so using it can feel like thinking
// a stream of consciousness.

// IMPLEMENT SYNTAX:
//
// COMMANDS:
// help
// list
// find
// archive
//
// INSTANTIATING/LINKING TO PRIMITIVE CONSTRUCTS:
// none                                                returns primitive structure 'none'
// 234                                                 returns primitive number typeId pointing to 234 structure
// 'foo'                                               returns primitive structure pointing to 'foo'
// ()                                                  creates structure -> empty list //// allows use of 'list' command for CLI
// [typeId-handle]                                   creates (or selects) a type of specified typeId, creating the typeId if non-existent
// typeId-handle                                     creates a structure of the specified typeId
//
// [port].mode list : 'input', 'output'
// [port].mode : list : 'input', 'output'
// [port].mode : list : 'input', 'output'
// port
// port.mode 'input'
// !port.mode 'input'
// port.mode ('input')                                 adds 'input' to the list (changing to list if necessary)
// port.mode !('input')                                removes 'input' from the list (only valid if already a list)
// port.mode ('input', 'output')                       adds 'input' and 'output' to the list (changing to list if necessary)
// port.mode !('input', 'output')                      removes 'input' and 'output' from the list (only valid if already a list)
//
// LISTING CONSTRUCTS:
// <>                                                  returns list of current links
// []                                                  returns list of current types
// .                                                   returns list of current constructs
// ?                                                   shows current structure _link_ if it exists
// !                                                   deletes current structure _link_ if exists?
// :                                                   returns list of current structure or type features
//
// <port>.id.34
//
// [port]
// [port]?                                             checks for existence of port typeId and returns it if so
// ![port]                                             deletes the port typeId (blocks use of types for creating new constructs, but doesn't disallow access to existing constructs)
// [port].id.34                                        syntax for type lookup/selection
// [port].id.34?                                       syntax for type lookup/selection
// ![port].id.34                                       syntax for type lookup/selection
// [port].uuid.4a78b550-8d20-4f11-8209-655c90039815
// [port].uuid.4a78b550-8d20-4f11-8209-655c90039815?
// ![port].uuid.4a78b550-8d20-4f11-8209-655c90039815
// [port].id
// [port].uuid
// [port].uri                                          returns api callable URI in terms of data model (types, types, constructs, etc.)?
// [port].api                                          returns api callable URI in terms of data model (types, types, constructs, etc.)?
//
// [port](id:34)                                       syntax for type lookup
// [port(id:34)]                                       syntax for type lookup
// [port].34                                           syntax for type lookup
// [port].4a78b550-8d20-4f11-8209-655c90039815
// [port.34]                                           syntax for type lookup
// [port].34?
// [port].34?
// ![port].34
// [port].id.34                                        syntax for type lookup/selection
// [port].id                                           syntax for describing id
// [port].uuid.4a78b550-8d20-4f11-8209-655c90039815
// [port].uri                                          returns api callable URI in terms of data model (types, types, constructs, etc.)?
// [port].api                                          returns api callable URI in terms of data model (types, types, constructs, etc.)?
// port(id:34)                                         syntax for structure lookup
// <port>                                              creates a link to a port
//
// port.34.mode digital, analog : port.34.voltage cmos, ttl :: port.66.mode digital, analog : port.66.voltage cmos, ttl
// port.34.mode digital,analog .voltage cmos,ttl : port.66.mode digital .voltage cmos,ttl
// port.34.mode digital,analog .voltage cmos,ttl : port.66.mode digital .voltage cmos,ttl
// port.34.mode ('digital', 'analog') .voltage ('cmos', 'ttl') : port.66.mode 'digital' .voltage 'cmos'
// port.34 .mode ('digital', 'analog') .voltage ('cmos', 'ttl') : port.66 .mode 'digital' .voltage 'cmos'
// port.34 .mode ('digital', 'analog'), .voltage ('cmos', 'ttl') : port.66 .mode 'digital', .voltage 'cmos', 'ttl'
// .mode ('digital', 'analog'), .voltage ('cmos', 'ttl') : .mode 'digital', .voltage ('cmos', 'ttl')
// .mode 'digital', 'analog', .voltage 'cmos', 'ttl' : .mode 'digital', .voltage 'cmos', 'ttl'
// .mode !'digital', 'analog', .voltage !'cmos', 'ttl' : .mode !'digital', .voltage 'cmos', !'ttl'
// port.34 : port.66 # returns list of valid domain range states that are valid for the typeId
//
// CONSIDER USING FORMAT:
// port
// port.id.34
// port.index.1
// port.1
// port.uuid.4a78b550-8d20-4f11-8209-655c90039815
// .mode # creates mode feature and assigns it to none (i.e., replaces "has")
// .mode none # assigns mode to none only works if mode feature exists (i.e., above command must have been executed)
// port<mode> 'feature-data' # looks up a feature called "mode" and assigns a structure to it
// path<source-port> port.44 # looks up a feature called "mode" and ADDS a structure to list
// port<mode-list> 'feature-data' # looks up a feature called "mode" and ADDS a structure to list
// port<mode-list> !'feature-data' # looks up a feature called "mode" and REMOVES a structure from list
// port<mode-list> -'feature-data' # looks up a feature called "mode" and REMOVES a structure from list
// (mode) 'feature-data' # looks up a feature called "mode" and assigns a structure to it
// (source-port) port.44 # looks up a feature called "mode" and assigns a structure to it
// !(mode) # deletes the feature if it exists from current structure
// :mode 'feature-data' # looks up a feature called "mode" and assigns a structure to it
// :source-port port.44 # looks up a feature called "mode" and assigns a structure to it
// !:mode # deletes the feature if it exists from current structure
// .mode 'feature-data' # looks up a feature called "mode" and assigns a structure to it
// .source-port port.44 # looks up a feature called "mode" and assigns a structure to it
// !.mode # deletes the feature if it exists from current structure
// <> # list of links!
// [
// link
// (mode)? # checks for existence of mode feature
// (mode-list) 'feature-data' # looks up a feature called "mode" and ADDS a structure to list
// <mode> 'feature-data' # looks up a feature called "mode" and assigns a structure to it
// <mode-list> 'feature-data' # looks up a feature called "mode" and ADDS a structure to list
// <mode-list> !'feature-data' # looks up a feature called "mode" and REMOVES a structure from list
// <mode-list> -'feature-data' # looks up a feature called "mode" and REMOVES a structure from list
// <> # returns list of current structure's features with values
// port 34
// port 4a78b550-8d20-4f11-8209-655c90039815
// port @tag
// list [port] # lists port types
// list port # lists port constructs
// list # creates a list structure
// number [port] # prints count of port types
// number port # prints count of port constructs
// // comment
// [port] # to create port
// list-feature << structure-assignment # to add element to port list structure
// port # to reference the port in the workspace namespace scope
// [port.id.34] # to create port with specified structure
// port.id.34 # to reference port with specified id
// describe # to show current structure or type in namespace
// describe port.id.34 # to describe specific structure
// describe [port.id.44] # to describe specific type
// - Use CLI by creating data structures and assembling models with them.
// TODO: replace uid with a hex string of form "0x343f"
// TODO: replace uid with a hex string of form "x343f"
// TODO: replace uid with a hex string of form "x343"
// TODO: replace uid with a hex string of form "n343"
// TODO: replace uid with a hex string of form "index.343"
